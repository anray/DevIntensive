package com.softdesign.devintensive.data.storage.models;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIKES".
*/
public class LikesDao extends AbstractDao<Likes, Long> {

    public static final String TABLENAME = "LIKES";

    /**
     * Properties of entity Likes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property UserIdWhoLiked = new Property(1, String.class, "userIdWhoLiked", false, "USER_ID_WHO_LIKED");
        public final static Property UserRemoteId = new Property(2, String.class, "userRemoteId", false, "USER_REMOTE_ID");
    };

    private DaoSession daoSession;

    private Query<Likes> user_MLikesQuery;

    public LikesDao(DaoConfig config) {
        super(config);
    }
    
    public LikesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIKES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"USER_ID_WHO_LIKED\" TEXT NOT NULL ," + // 1: userIdWhoLiked
                "\"USER_REMOTE_ID\" TEXT);"); // 2: userRemoteId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_LIKES_USER_ID_WHO_LIKED_USER_REMOTE_ID ON LIKES" +
                " (\"USER_ID_WHO_LIKED\" ASC,\"USER_REMOTE_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIKES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Likes entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindString(2, entity.getUserIdWhoLiked());
 
        String userRemoteId = entity.getUserRemoteId();
        if (userRemoteId != null) {
            stmt.bindString(3, userRemoteId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Likes entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindString(2, entity.getUserIdWhoLiked());
 
        String userRemoteId = entity.getUserRemoteId();
        if (userRemoteId != null) {
            stmt.bindString(3, userRemoteId);
        }
    }

    @Override
    protected final void attachEntity(Likes entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Likes readEntity(Cursor cursor, int offset) {
        Likes entity = new Likes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getString(offset + 1), // userIdWhoLiked
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // userRemoteId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Likes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserIdWhoLiked(cursor.getString(offset + 1));
        entity.setUserRemoteId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Likes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Likes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mLikes" to-many relationship of User. */
    public List<Likes> _queryUser_MLikes(String userRemoteId) {
        synchronized (this) {
            if (user_MLikesQuery == null) {
                QueryBuilder<Likes> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserRemoteId.eq(null));
                user_MLikesQuery = queryBuilder.build();
            }
        }
        Query<Likes> query = user_MLikesQuery.forCurrentThread();
        query.setParameter(0, userRemoteId);
        return query.list();
    }

}
